--------------create table CLIENT
CREATE TABLE CLIENT(
    ID_CLIENT INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    NOM_CLIENT VARCHAR2(50),
    EMAIL_CLIENT VARCHAR2(50),
    VIP_CLIENT NUMBER(1),
    CONSTRAINT PK_IDCLIENT PRIMARY KEY (ID_CLIENT)
);

--------------end create table CLIENT

---------------insert client
INSERT INTO CLIENT(
    NOM_CLIENT,
    EMAIL_CLIENT,
    VIP_CLIENT
) VALUES (
    'bouhlali abdelfattah',
    'bydevmarcontact@gmail.com',
    0
);

INSERT INTO CLIENT(
    NOM_CLIENT,
    EMAIL_CLIENT,
    VIP_CLIENT
) VALUES (
    'haffoud omar el akram',
    'omarelakram@gmail.com',
    1
);

INSERT INTO CLIENT(
    NOM_CLIENT,
    EMAIL_CLIENT,
    VIP_CLIENT
) VALUES (
    'senhaji aicha',
    'senhaji_aicha@gmail.com',
    1
);

---------------end client insert
SELECT
    *
FROM
    CLIENT;

--------------create table VOITURE
CREATE TABLE VOITURE(
    MATRICULE VARCHAR2(50),
    MOTEUR_TAILLE NUMBER,
    KILOMETRE NUMBER,
    MARQUE VARCHAR2(50),
    MODEL INTEGER,
    CONSTRAINT PK_MATRICULE PRIMARY KEY (MATRICULE)
);

--------------END create table CLIENT
-------------begin voiture insert
INSERT INTO VOITURE VALUES (
    'MAT01',
    250,
    59000,
    'FORD FIESTA',
    2019
);

INSERT INTO VOITURE VALUES (
    'MAT02',
    120,
    159000,
    'RENAULT CLIO 4',
    2015
);

INSERT INTO VOITURE VALUES (
    'MAT03',
    220,
    140000,
    'DACIA LOGAN',
    2016
);

INSERT INTO VOITURE VALUES (
    'MAT04',
    150,
    89000,
    'FORD FOCUS',
    2012
);

----end voiture INSERT
SELECT
    *
FROM
    VOITURE;

--------------create table RESERVATION
CREATE TABLE RESERVATION(
    ID_CLIENT INTEGER,
    MATRICULE VARCHAR2(50),
    DATE_RES DATE,
    DATE_RETOUR DATE,
    NB_JOURS NUMBER,
    ETAT_RES NUMBER(1),
    CONSTRAINT FK_RESERVATION_IDCLIENT FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID_CLIENT),
    CONSTRAINT FK_RESERVATION_MATRICULE FOREIGN KEY (MATRICULE) REFERENCES VOITURE(MATRICULE)
);

--------------END create table RESERVATION
----------------begin reservaton insert
INSERT INTO RESERVATION VALUES (
    1,
    'MAT01',
    SYSDATE,
    SYSDATE+7,
    7,
    1
);

INSERT INTO RESERVATION VALUES (
    2,
    'MAT04',
    SYSDATE,
    SYSDATE+15,
    15,
    1
);

INSERT INTO RESERVATION VALUES (
    3,
    'MAT02',
    SYSDATE-2,
    SYSDATE,
    2,
    1
);

----------------end reservation insert
SELECT
    *
FROM
    RESERVATION;

----------------create table client rouge
CREATE TABLE CLIENTROUGE (
    ID_CLIENT INTEGER,
    DATE_AJOUT DATE,
    RAISON_BAN VARCHAR2(200),
    CONSTRAINT FK_CLIENTROUGE_IDCLIENT FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID_CLIENT)
);

-----begin insert clientrouge
INSERT INTO CLIENTROUGE VALUES (
    1,
    SYSDATE,
    'kayheres tonobilat'
);

--------end insert clientrouge
SELECT
    *
FROM
    CLIENTROUGE;

-----------create table MAINTENANCE
CREATE TABLE MAINTENANCE (
    MAINT_ID INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    MATRICULE VARCHAR2(50),
    DATE_AJOUT DATE,
    ETAT_REPARATION NUMBER(1),
    CONSTRAINT FK_MAINTENANCE_MATRICULE FOREIGN KEY (MATRICULE) REFERENCES VOITURE(MATRICULE)
);

-----------end create table MAINTENANCE

--------insert into table MAINTENANCE
INSERT INTO MAINTENANCE(
    MATRICULE,
    DATE_AJOUT,
    ETAT_REPARATION
) VALUES (
    'MAT01',
    SYSDATE,
    0
);

INSERT INTO MAINTENANCE(
    MATRICULE,
    DATE_AJOUT,
    ETAT_REPARATION
) VALUES (
    'MAT02',
    SYSDATE,
    0
);

--------end insert into table MAINTENANCE
SELECT
    *
FROM
    MAINTENANCE;

---------------------------------------------------------------------
--QUESTION1
SELECT
    CLIENT.NOM_CLIENT,
    RESERVATION.MATRICULE
FROM
    RESERVATION
    JOIN CLIENT
    ON RESERVATION.ID_CLIENT = CLIENT.ID_CLIENT
WHERE
    EXTRACT(MONTH FROM DATE_RES) = 7
    AND EXTRACT(YEAR FROM DATE_RES)= 2020;

--------------------------------------------------------------------
--QUESTION 2

SELECT
    CLIENT.NOM_CLIENT,
    COUNT(CLIENT.NOM_CLIENT)
FROM
    RESERVATION
    JOIN CLIENT
    ON RESERVATION.ID_CLIENT = CLIENT.ID_CLIENT
WHERE
    EXTRACT(MONTH FROM DATE_RES) = 7
    AND EXTRACT(YEAR FROM DATE_RES)= 2022
GROUP BY
    CLIENT.NOM_CLIENT;

--QUESTION 3

CREATE OR REPLACE FUNCTION NB_RESERVATIONS(
    CLIENT CLIENT%ROWTYPE
) RETURN NUMBER IS
    TOTAL_RES NUMBER;
BEGIN
    SELECT
        COUNT(MATRICULE) INTO TOTAL_RES
    FROM
        RESERVATION
    WHERE
        ID_CLIENT = CLIENT.ID_CLIENT;
    RETURN TOTAL_RES;
END NB_RESERVATIONS;
/

----------------------------------------------------------------
--test quest precedent
DECLARE
    V_CLIENT           CLIENT%ROWTYPE;
    NBR_VOITURE_CLIENT NUMBER;
BEGIN
    SELECT
        * INTO V_CLIENT
    FROM
        CLIENT
    WHERE
        ID_CLIENT = 3;
    NBR_VOITURE_CLIENT := NB_RESERVATIONS(V_CLIENT);
    DBMS_OUTPUT.PUT_LINE('le nombre des voiture reservé par ce client est : '
        || NBR_VOITURE_CLIENT);
END;
/

------------------------------------------------------------------------
--QUESTION 4
CREATE OR REPLACE FUNCTION ENMAINTENANCE(
    V_VOITURE VOITURE%ROWTYPE
) RETURN BOOLEAN IS
    V_ETAT_REPARATION NUMBER(1);
BEGIN
    SELECT
        ETAT_REPARATION INTO V_ETAT_REPARATION
    FROM
        MAINTENANCE
    WHERE
        (V_VOITURE.MATRICULE = MAINTENANCE.MATRICULE)
    ORDER BY
        MAINTENANCE.DATE_AJOUT DESC FETCH FIRST ROW ONLY;
    IF V_ETAT_REPARATION = 0 THEN
        RETURN FALSE;
    ELSE
        RETURN TRUE;
    END IF;
END;
/

--TEST QUESTION PRECEDENT
DECLARE
    V_VOITURE      VOITURE%ROWTYPE;
    V_ETAT_VOITURE BOOLEAN;
BEGIN
    SELECT
        * INTO V_VOITURE
    FROM
        VOITURE
    WHERE
        MATRICULE = 'MAT02';
    V_ETAT_VOITURE := ENMAINTENANCE(V_VOITURE);
    IF(V_ETAT_VOITURE = TRUE) THEN
        DBMS_OUTPUT.PUT_LINE('La voiture est reparé');
    ELSE
        DBMS_OUTPUT.PUT_LINE(Q'[La voiture n'EST REPARÉ]');
    END IF;
END;
/

---------------------------------------END TEST
--QUESTION 5
CREATE OR REPLACE PROCEDURE INSERER_CLIENT (
    ID_CLIENT CLIENT.ID_CLIENT%TYPE,
    RAISON CLIENTROUGE.RAISON_BAN%TYPE
) IS
BEGIN
    INSERT INTO CLIENTROUGE VALUES (
        ID_CLIENT,
        SYSDATE,
        RAISON
    );
END;
/

--TEST QUESTION PRECEDENT

---------------
--QUESTION 6
--METHODE 1
CREATE OR REPLACE TRIGGER INTERDIT_EMAIL BEFORE
    UPDATE ON CLIENT FOR EACH ROW
BEGIN
    IF(:OLD.EMAIL_CLIENT <> :NEW.EMAIL_CLIENT)THEN
        RAISE_APPLICATION_ERROR(-20003, 'vous pouvez pas changer email des client');
    END IF;
END;
/

--METHODE 2
CREATE OR REPLACE TRIGGER INTERDIT_EMAIL BEFORE
    UPDATE OF EMAIL_CLIENT ON CLIENT FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20003, 'vous pouvez pas changer email des client');
END;
/

----------TEST QUESTION PRECEDENT
DECLARE
BEGIN
    UPDATE CLIENT
    SET
        EMAIL_CLIENT = 'abdelfattah@hotmail.com',
        NOM_CLIENT = 'BOUHLALI ABDELFATTAH'
    WHERE
        ID_CLIENT = 1;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

----QUESTION 7
CREATE OR REPLACE TRIGGER ENREPARATION BEFORE
    INSERT OR UPDATE ON RESERVATION FOR EACH ROW
DECLARE
    V_MATRICULE VOITURE.MATRICULE%TYPE;
BEGIN
    SELECT
        MATRICULE INTO V_MATRICULE
    FROM
        MAINTENANCE
    WHERE
        (MAINTENANCE.MATRICULE = :NEW.MATRICULE)
        AND (MAINTENANCE.ETAT_REPARATION = 0)
    ORDER BY
        MAINTENANCE.DATE_AJOUT DESC FETCH FIRST ROW ONLY;
    IF(V_MATRICULE IS NOT NULL)THEN
        RAISE_APPLICATION_ERROR(-20002, 'cette voiture est en reparation!');
    END IF;
END;
/

--test QUESTION 7
INSERT INTO RESERVATION VALUES (
    1,
    'MAT02',
    SYSDATE,
    SYSDATE+2,
    2,
    1
);

--QUESTION 8
--sol1
CREATE OR REPLACE TRIGGER ANCIEN_MODELE BEFORE
    INSERT OR UPDATE ON RESERVATION FOR EACH ROW
DECLARE
    V_MODELE_VOITURE VOITURE.MODEL%TYPE;
BEGIN
    SELECT
        VOITURE.MATRICULE INTO V_MODELE_VOITURE
    FROM
        VOITURE
    WHERE
        VOITURE.MATRICULE = :NEW.MATRICULE;
    IF (V_MODELE_VOITURE < 2012) AND RESERVATION.NB_JOURS > 7 ) THEN
        RAISE_APPLICATION_ERROR(-20003, '[C'EST INTERDIT DE LOUER CETTE VOITURE PLUS D'UNE SEMAINE!]');
    END IF;
END;
/

--SOL 2
CREATE OR REPLACE TRIGGER ANCIEN_MODELE BEFORE
    INSERT OR UPDATE ON RESERVATION FOR EACH ROW WHEN NB_JOURS > 7
DECLARE
    V_MODELE_VOITURE VOITURE.MODEL%TYPE;
BEGIN
    SELECT
        VOITURE.MATRICULE INTO V_MODELE_VOITURE
    FROM
        VOITURE
    WHERE
        VOITURE.MATRICULE = :NEW.MATRICULE;
    IF (V_MODELE_VOITURE < 2012) THEN
        RAISE_APPLICATION_ERROR(-20003, '[C'EST INTERDIT DE LOUER CETTE VOITURE PLUS D'UNE SEMAINE!]');
    END IF;
END;
/